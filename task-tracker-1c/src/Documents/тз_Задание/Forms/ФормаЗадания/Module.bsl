
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	тз_ОбщегоНазначенияТрекер.НастроитьСвязьПараметраВыбораЭтапа(Элементы.Этап, "Объект.Проект");
	ПоказыватьСлужебныеКомментарии = Истина;
	Если Параметры.Свойство("СозданиеНового") И Параметры.Свойство("Профиль") Тогда
		Объект.Профиль = Параметры.Профиль;
		Объект.Проект = Параметры.Проект;
		Объект.Этап = Параметры.Этап;
		Объект.Дата = ТекущаяДатаСеанса();
		Объект.Автор = тз_Пользователи.ТекущийПользователь();
		Задание = Объект.Ссылка;
		РежимФормы = ПредопределенноеЗначение("Перечисление.тз_РежимыФормы.Редактирование");
		
		Если ЗначениеЗаполнено(Объект.Профиль) Тогда
			
			МассивПроектов = Справочники.тз_ПрофилиЗаданий.ПолучитьПереченьПроектов(Объект.Профиль);
			
			Если МассивПроектов.Количество() = 1 Тогда
				Объект.Проект = МассивПроектов[0];
			КонецЕсли;
			
		КонецЕсли;
		
		// Для ручной записи выводим кнопку.
		Элементы.ЗаписатьЗадание.Видимость = Истина;
		
	Иначе
		Параметры.Свойство("Задание", Задание);
	КонецЕсли;
	
	Параметры.Свойство("РежимФормы", РежимФормы);
	
	Если ЗначениеЗаполнено(Задание) Тогда
		
		// Производим чтение данных задания
		ТекущийОбъект = Задание.ПолучитьОбъект();
		ТекущийОбъект.Прочитать();
		ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
		
		// Читаем основные аналитики задания
		ПриЧтенииНаСервере(ТекущийОбъект);
	ИначеЕсли Не Объект.Ссылка.Пустая() Тогда
		ПриЧтенииНаСервере(Объект);
	КонецЕсли;
	
	// Период обновления последнего комментария
	ЗначениеПериодаОбновления = Константы.тз_ВремяЗаписиКомментария.Получить();
	ПериодОбновленияКомментария = ?(ЗначениеЗаполнено(ЗначениеПериодаОбновления), ЗначениеПериодаОбновления, 1);
	
	// Обновим список аналитик задания
	тз_ОбщегоНазначенияТрекер.ЗаполнитьСписокАналитикЗадания(ЗначенияАналитик, Задание, Объект.Профиль, Истина);
	ДополнитьАналитикиПредопределеннымиЗначениями();
	
	тз_ОбщегоНазначенияТрекер.СформироватьРеквизитыИЭлементыАналитик(ЭтотОбъект,
		ЗначенияАналитик,
		Элементы.ГруппаАналитики,
		Истина,,Истина);
	
	Если РежимФормы = ПредопределенноеЗначение("Перечисление.тз_РежимыФормы.Просмотр") Тогда
		тз_ОбщегоНазначенияВызовСервераТрекер.ЗаписатьОперациюБизнесСтатистики("ОткрытиеФормыРанееСозданногоЗадания");
	КонецЕсли;
	
	// Дальнейшие действия выполняются только для нового объекта.
	Если Не Параметры.Свойство("СозданиеНового") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьИсполнителяПоОтветсвенномуПроекта();
	
	Справочники.тз_ПрофилиЗаданий.ПолучитьПереченьСостоянийЗаданий(Объект.Профиль, Элементы.Состояние.СписокВыбора);
	Справочники.тз_ПрофилиЗаданий.ПолучитьПереченьПриоритетов(Объект.Профиль, Элементы.Приоритет.СписокВыбора);
	ТаблицаСостоянийПоПрофилю.Загрузить(ПолучитьСписокСостоянийПоПрофилю(Объект.Профиль));
	
	Если ТаблицаСостоянийПоПрофилю.Количество() > 0 Тогда
		Объект.Состояние = ТаблицаСостоянийПоПрофилю[0].Состояние;
		Объект.ТекущийИсполнитель = ТаблицаСостоянийПоПрофилю[0].Исполнитель;
	КонецЕсли;
	
	ЗаполнитьСостоянияИзТаблицыСостояний(ТаблицаСостоянийПоПрофилю, Объект.Состояние);
	ОбновитьЗаголовокФормы();
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Заполняем основные реквизиты формы по заданию.
	ОбновитьЗаголовокФормы();
	ОбновитьТаблицуПрисоединенныхФайлов();
	
	Если РежимФормы = ПредопределенноеЗначение("Перечисление.тз_РежимыФормы.Редактирование") Тогда
		СодержаниеЗадания = ТекущийОбъект.СодержаниеHTML;
		
		Вложения = Новый Структура;
		ПодставитьИзображенияВHTML(СодержаниеЗадания, Вложения, Истина);
		СодержаниеФорматируеммыйДокумент.УстановитьHTML(СодержаниеЗадания, Вложения);
	КонецЕсли;
	
	Если Не ТекущийОбъект.Ссылка.Пустая() Тогда
		ОбновитьЗначенияВсехАналитик()
	КонецЕсли;
	
	// Служебные сведения о задании
	ОбновитьАктуальностьДанных();
	
	Справочники.тз_ПрофилиЗаданий.ПолучитьПереченьСостоянийЗаданий(ТекущийОбъект.Профиль, Элементы.Состояние.СписокВыбора);
	Справочники.тз_ПрофилиЗаданий.ПолучитьПереченьПриоритетов(ТекущийОбъект.Профиль, Элементы.Приоритет.СписокВыбора);
	ТаблицаСостоянийПоПрофилю.Загрузить(ПолучитьСписокСостоянийПоПрофилю(ТекущийОбъект.Профиль));
	ЗаполнитьСостоянияИзТаблицыСостояний(ТаблицаСостоянийПоПрофилю, ТекущийОбъект.Состояние);
	
	УправлениеДиалогомНаСервере();
	
	СформироватьHTMLПоле();
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПериодТекущаяДата = ТекущаяДатаСеанса();
	
	ЗаписываемыеАналитики = Новый Соответствие();
	АналитикиНеЗаполнены = Ложь;
	Для Каждого СтрокаАналитики Из ЗначенияАналитик Цикл
		Если СтрокаАналитики.Обязательная
			И Не СтрокаАналитики.Предопределенный
			И Не ЗначениеЗаполнено(ЭтотОбъект[СтрокаАналитики.ИмяЭлемента]) Тогда
			АналитикиНеЗаполнены = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(НСтр("ru='Поле ""%1"" не заполнено'"), СтрокаАналитики.ИмяАналитики);
			Сообщение.Сообщить();
			Продолжить;
		КонецЕсли;
		
		Если СтрокаАналитики.Предопределенный Тогда
			ЗаписываемыеАналитики.Вставить(СтрокаАналитики.Аналитика, Объект[СтрокаАналитики.ИмяЭлемента])
		Иначе
			ЗаписываемыеАналитики.Вставить(СтрокаАналитики.Аналитика, ЭтотОбъект[СтрокаАналитики.ИмяЭлемента]);
		КонецЕсли;
	КонецЦикла;
	
	СрезПоследних = РегистрыСведений.тз_ЗначенияАналитик.СрезПоследних(, Новый Структура("Задание", ТекущийОбъект.Ссылка));
	Для каждого СтрокаТаблицыАналитик Из СрезПоследних Цикл
		
		// Пропустим измененные аналитики
		Если ЗаписываемыеАналитики.Получить(СтрокаТаблицыАналитик.Аналитика)<>СтрокаТаблицыАналитик.Значение Тогда
			Продолжить;
		КонецЕсли;
		
		// Исключаем не измененные из перечня записываемых
		ЗаписываемыеАналитики.Удалить(СтрокаТаблицыАналитик.Аналитика);
		
	КонецЦикла;
	
	Если ЗаписываемыеАналитики.Количество()=0 И Не Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектНеЗаполнен = Не ТекущийОбъект.ПроверитьЗаполнение();
	Отказ = ОбъектНеЗаполнен Или АналитикиНеЗаполнены;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ТекущийОбъект.Модифицированность() Тогда
			ТекущийОбъект.Записать();
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.тз_ЗначенияАналитик.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Задание.Установить(ТекущийОбъект.Ссылка);
		НаборЗаписей.Отбор.Период .Установить(ПериодТекущаяДата);
		
		Для каждого Аналитика Из ЗаписываемыеАналитики Цикл
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.Задание   = ТекущийОбъект.Ссылка;
			НоваяСтрока.Период    = ПериодТекущаяДата;
			НоваяСтрока.Аналитика = Аналитика.Ключ;
			НоваяСтрока.Значение  = Аналитика.Значение;
			НоваяСтрока.Автор     = тз_Пользователи.ТекущийПользователь();
		КонецЦикла;
		
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записать(ИСТИНА);
		КонецЕсли;
		
	Исключение
		ПричинаОшибки = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		тз_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ПричинаОшибки),,,, Отказ);
		Возврат;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ПриЗаписиНаСервере()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" 
		И Параметр.Владелец = Объект.Ссылка
		И Параметр.РежимФормы = РежимФормы Тогда
		
		Если Параметр.ОтложенноеДобавление Тогда
			БуферФайла = БуферФайлов.Добавить(Параметр.Файл, Параметр.Файл.ИмяБезРасширения + "." + Параметр.Файл.РасширениеБезТочки);
			
			НовыйФайл = ТаблицаПрисоединенныхФайлов.Вставить(0);
			НовыйФайл.ИмяФайла = БуферФайла.Представление;
			НовыйФайл.Файл = БуферФайла.Значение;
			НовыйФайл.МодифицируемыйФайл = Истина;
			НовыйФайл.ИдентификаторЭлементаВСписке = БуферФайла.ПолучитьИдентификатор();
			НовыйФайл.ИндексИзображенияЗагрузки = 1;
			
			Элементы.ТаблицаПрисоединенныхФайлов.ТекущаяСтрока = НовыйФайл.ПолучитьИдентификатор();
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Не ЗакрытьПринудительно И
		(КомментарийСоддержаниеФорматируемый.Элементы.Количество() > 0
		ИЛИ БуферФайлов.Количество() > 0
		ИЛИ БуферФайловСкрытый.Количество() > 0) Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru='Данные были изменены. Сохранить изменения?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросПередЗакрытием", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Подключаемый_ПриИзмененииПрограммногоРеквизита(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ПрофильПриИзмененииНаСервере()
	
	Справочники.тз_ПрофилиЗаданий.ПолучитьПереченьСостоянийЗаданий(Объект.Профиль, Элементы.Состояние.СписокВыбора);
	Справочники.тз_ПрофилиЗаданий.ПолучитьПереченьПриоритетов(Объект.Профиль, Элементы.Приоритет.СписокВыбора);
	МассивПроектов = Справочники.тз_ПрофилиЗаданий.ПолучитьПереченьПроектов(Объект.Профиль);
	
	Если Не ЗначениеЗаполнено(Объект.Проект) И МассивПроектов.Количество() = 1 Тогда
		Объект.Проект = МассивПроектов[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильПриИзменении(Элемент)
	ПрофильПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ДанныеСобытия.Element.className = "FileID" И ДанныеСобытия.Свойство("href") Тогда
		СсылкаСтрокойФайла = Прав(ДанныеСобытия.href, 36);
		УникальныйИдентификаторФайла = Новый УникальныйИдентификатор(СсылкаСтрокойФайла);
		тз_РаботаСФайламиКлиент.ЗагрузитьФайл(УникальныйИдентификаторФайла);
	ИначеЕсли ДанныеСобытия.Element.tagName = "IMG" И ДанныеСобытия.Свойство("href") Тогда
		СсылкаСтрокойФайла = Прав(ДанныеСобытия.href, 36);
		УникальныйИдентификаторФайла = Новый УникальныйИдентификатор(СсылкаСтрокойФайла);
		тз_РаботаСФайламиКлиент.ЗагрузитьФайл(УникальныйИдентификаторФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказыватьСлужебныеКомментарииНаСервере()
	УправлениеДиалогомНаСервере();
	СформироватьHTMLПоле();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПрисоединенныхФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаПрисоединенныхФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЭтоУдаление = Поле.Имя = "ТаблицаПрисоединенныхФайловИндексИзображенияУдаления";
	УдалениеФайловДоступно = РежимФормы = ПредопределенноеЗначение("Перечисление.тз_РежимыФормы.Редактирование");
	
	// Удаление файла из буфера файлов до помещения.
	Если ЭтоУдаление И ТекущиеДанные.МодифицируемыйФайл Тогда
		СтрокаВСпискеЗначения = БуферФайлов.НайтиПоИдентификатору(ТекущиеДанные.ИдентификаторЭлементаВСписке);
		БуферФайлов.Удалить(СтрокаВСпискеЗначения);
		ТаблицаПрисоединенныхФайлов.Удалить(ТекущиеДанные);
		
	// Удаление присоединенных файлов в режиме редактировани.
	ИначеЕсли ЭтоУдаление И Не ТекущиеДанные.МодифицируемыйФайл И УдалениеФайловДоступно Тогда
		ТекстВопроса = НСтр("ru='Файл будет помечен на удаление.
		|Продолжить?'");
		
		ОписаниеОповещение = Новый ОписаниеОповещения("ОбработатьВопросПоУдалениюФайлов", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru='Удаление файла'"));
		
	// Загрузка присоединенных файлов.
	ИначеЕсли Не ТекущиеДанные.МодифицируемыйФайл Тогда
		тз_РаботаСФайламиКлиент.ЗагрузитьФайл(ТекущиеДанные.Файл);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаданияНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПрофильЗаданий", Объект.Профиль);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыбораВидаЗадания", ЭтотОбъект);
	ОткрытьФорму("Справочник.тз_ВидыЗаданий.ФормаВыбора", ПараметрыФормы,ЭтотОбъект,,,,
		ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыбораВидаЗадания(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.ВидЗадания = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПрисоединенныхФайловПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПрисоединенныхФайловПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыполнения = Новый Структура();
	ПараметрыВыполнения.Вставить("ОтложенноеДобавление", Истина);
	ПараметрыВыполнения.Вставить("РежимФормы", РежимФормы);
	ПараметрыВыполнения.Вставить("ВладелецФайла", Объект.Ссылка);
	ПараметрыВыполнения.Вставить("Комментарий", ПредопределенноеЗначение("Справочник.тз_Комментарии.ПустаяСсылка"));
	ПараметрыВыполнения.Вставить("НеобходимоОткрытиеДиалога", Ложь);
	
	ИменаФайлов = Новый Массив;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда 
		ИменаФайлов.Добавить(ПараметрыПеретаскивания.Значение.ПолноеИмя);
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		Для Каждого Файл Из ПараметрыПеретаскивания.Значение Цикл
			ИменаФайлов.Добавить(Файл.ПолноеИмя);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("ИменаФайлов", ИменаФайлов);
	тз_РаботаСФайламиКлиент.ДобавитьФайл(ПараметрыВыполнения, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьЗадание(Команда)
	ОткрытьЗначениеАсинх(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийДобавить(Команда)
	
	// Признак модификации нужен только для автоматической блкировки доступности
	ЭтотОбъект.Модифицированность = ЛОЖЬ;
	
	// Если нет содержания, то и добавлять ничего не будем
	Если КомментарийСоддержаниеФорматируемый.ПолучитьЭлементы().Количество() = 0 И БуферФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Производим запись комментария в базу
	КомментарийДобавитьНаСервере(КомментарийСоддержаниеФорматируемый);
	
	// Очищаем поле ввода
	ЭтотОбъект.КомментарийСоддержаниеФорматируемый.Удалить();
	
	// Обновляем динамические списки
	ОповеститьОбИзменении(Тип("СправочникСсылка.тз_Комментарии"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗадание(Команда)
	Отказ = Ложь;
	ЗаписатьЗаданиеНаСервере(Отказ);
	Если Не Отказ Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьФайл(Команда)
	ПараметрыВыполнения = Новый Структура();
	ПараметрыВыполнения.Вставить("ОтложенноеДобавление", Истина);
	ПараметрыВыполнения.Вставить("РежимФормы", РежимФормы);
	ПараметрыВыполнения.Вставить("ВладелецФайла", Объект.Ссылка);
	ПараметрыВыполнения.Вставить("Комментарий", ПредопределенноеЗначение("Справочник.тз_Комментарии.ПустаяСсылка"));
	ПараметрыВыполнения.Вставить("НеобходимоОткрытиеДиалога", Истина);
	тз_РаботаСФайламиКлиент.ДобавитьФайл(ПараметрыВыполнения, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьФайл(Команда)
	ВыбратьФайл("ЗагрузитьФайл");
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеОсновныхРеквизитов", ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимФормы", ПредопределенноеЗначение("Перечисление.тз_РежимыФормы.Редактирование"));
	ПараметрыФормы.Вставить("Задание", Объект.Ссылка);
	ОткрытьФорму("Документ.тз_Задание.Форма.ФормаЗадания", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСлужебныеКомментарии(Команда)
	ПоказыватьСлужебныеКомментарии = Не ПоказыватьСлужебныеКомментарии;
	ПоказыватьСлужебныеКомментарииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКТеме(Команда)
	Элементы.ТекстHTML.Документ.defaultView.parent.move_to_start();
КонецПроцедуры

&НаКлиенте
Процедура УказатьСледующееСостояние(Команда)
	ПерейтиНаСостояние("Вперед");
КонецПроцедуры

&НаКлиенте
Процедура УказатьПредыдущееСостояние(Команда)
	ПерейтиНаСостояние("Назад");
КонецПроцедуры

&НаКлиенте
Процедура Переадресовать(Команда)
	
	ИспользуютсяПользователиБСП = тз_ПользователиВызовСервера.ИспользуютсяПользователиБСП();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПереадресацию", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("РежимВыбора",Истина);
	
	СправочникПользователей = ?(ИспользуютсяПользователиБСП, "Справочник.Пользователи", "Справочник.тз_Пользователи");
	ОткрытьФорму(СправочникПользователей + ".ФормаВыбора",ПараметрыФормы,ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОПрограмме(Команда)
	ОткрытьФорму("ОбщаяФорма.ОПрограмме",,ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Напомнить(Команда)
	ПараметрыФормы = Новый Структура("Источник", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.НапоминанияПользователя.Форма.Напоминание", ПараметрыФормы, Объект.Ссылка, Ложь, Неопределено);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеДиалогомНаСервере()

	Если ПоказыватьСлужебныеКомментарии Тогда
		Элементы.ПоказыватьСлужебныеКомментарииКоманда.ЦветФона = WebЦвета.СеребристоСерый;
		Элементы.ПоказыватьСлужебныеКомментарииКоманда.Картинка = БиблиотекаКартинок.тз_СкрытьСлужебныеКомментарии;
	Иначе
		Элементы.ПоказыватьСлужебныеКомментарииКоманда.ЦветФона = Новый Цвет();
		Элементы.ПоказыватьСлужебныеКомментарииКоманда.Картинка = БиблиотекаКартинок.тз_ПоказатьСлужебныеКомментарии;
	КонецЕсли;
	
	Элементы.Напомнить.Видимость = тз_ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.НапоминанияПользователя")
		И тз_ОбщегоНазначенияТрекер.ОпределяемыеТипыНапоминанийЗаполнены();
	
	УстановитьВидимостьПоРежимуФормы();
КонецПроцедуры

&НаСервере
Процедура СформироватьHTMLПоле()
	
	ТекстHTML = ПолучитьОбщийМакет("тз_ШаблонВыводаЗадания").ПолучитьТекст();
	Base64ИзображенияЗагрузки = Base64Строка(БиблиотекаКартинок.тз_ИзображениеЗагрузки.ПолучитьДвоичныеДанные());
	
	//Уберем переносы строк
	Base64ИзображенияЗагрузки = СтрЗаменить(Base64ИзображенияЗагрузки, Символ(10), "");
	Base64ИзображенияЗагрузки = СтрЗаменить(Base64ИзображенияЗагрузки, Символ(13), "");
	
	ТекстHTML = СтрЗаменить(ТекстHTML,"[Base64КартинкиЗагрузки]", Base64ИзображенияЗагрузки);
	
	// Инициализируем шаблоны элементов html.
	ШаблонСодержания =ПолучитьШаблонСодержания();
	ШаблонСвоегоКомментария = ПолучитьШаблонКомментария(Истина);
	ШаблонЧужогоКомментария = ПолучитьШаблонКомментария(Ложь);
	
	ШаблонСвоегоСлужебногоСообщенияРаскрывемый = ПолучитьШаблонСлужебногоСообщения(Истина, Истина);
	ШаблонСвоегоСлужебногоСообщенияТекст = ПолучитьШаблонСлужебногоСообщения(Истина, Ложь);
	ШаблонЧужогоСлужебногоСообщенияРаскрывемый = ПолучитьШаблонСлужебногоСообщения(Ложь, Истина);
	ШаблонЧужогоСлужебногоСообщенияТекст = ПолучитьШаблонСлужебногоСообщения(Ложь, Ложь);
	
	ШаблонДаты = ПолучитьШаблонДаты();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тз_Комментарии.Содержание КАК Содержание,
		|	тз_Комментарии.ДатаСоздания КАК ДатаСоздания,
		|	тз_Комментарии.Автор = &ТекущийПользователь КАК СвойКомментарий,
		|	тз_Комментарии.СодержаниеHTML КАК СодержаниеHTML,
		|	тз_Комментарии.Ссылка КАК Ссылка,
		|	тз_Комментарии.ТипКомментария КАК ТипКомментария,
		|	тз_Комментарии.Автор.Представление КАК Автор,
		|	НАЧАЛОПЕРИОДА(тз_Комментарии.ДатаСоздания, ДЕНЬ) КАК ДатаДляРазделениеДней
		|ИЗ
		|	Справочник.тз_Комментарии КАК тз_Комментарии
		|ГДЕ
		|	тз_Комментарии.Задание = &Задание
		|	И НЕ тз_Комментарии.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА &ПоказыватьСлужебныеКомментарии
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ тз_Комментарии.ТипКомментария = ЗНАЧЕНИЕ(Перечисление.тз_ТипыКомментариев.Комментарий)
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания
		|ИТОГИ ПО
		|	ДатаДляРазделениеДней
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тз_ЗаданиеПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	тз_ЗаданиеПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		|	тз_ЗаданиеПрисоединенныеФайлы.КомментарийВладелец КАК КомментарийВладелец,
		|	тз_ЗаданиеПрисоединенныеФайлы.Представление КАК Представление,
		|	тз_ЗаданиеПрисоединенныеФайлы.Расширение КАК Расширение
		|ИЗ
		|	Справочник.тз_ЗаданиеПрисоединенныеФайлы КАК тз_ЗаданиеПрисоединенныеФайлы
		|ГДЕ
		|	тз_ЗаданиеПрисоединенныеФайлы.ВладелецФайла = &Задание";
	
	Запрос.УстановитьПараметр("Задание", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПоказыватьСлужебныеКомментарии", ПоказыватьСлужебныеКомментарии);
	
	ТекущийПользователь = тз_Пользователи.ТекущийПользователь();
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	// Получаем комментарии и все файлы задания.
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДатКомментариев= РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаФайлов = РезультатЗапроса[1].Выбрать();
	
	ТекстHTMLКомментарии = "";
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Пока ВыборкаДатКомментариев.Следующий() Цикл
		
		ФорматДаты = ПолучитьФорматПоДате(ВыборкаДатКомментариев.ДатаДляРазделениеДней, ТекущаяДата, Ложь);
		
		ТекстHTMLДата = СтрЗаменить(ШаблонДаты, "[Дата]", Формат(ВыборкаДатКомментариев.ДатаДляРазделениеДней, ФорматДаты));
		
		ТекстHTMLКомментарии = ТекстHTMLКомментарии + ТекстHTMLДата;
		ЗаголовокСлужебногоКомментария = "";
		ВыборкаКомментариев = ВыборкаДатКомментариев.Выбрать();
		Пока ВыборкаКомментариев.Следующий() Цикл
			Если ВыборкаКомментариев.ТипКомментария = ПредопределенноеЗначение("Перечисление.тз_ТипыКомментариев.Служебный") Тогда
				
				ЗаголовокСлужебногоКомментария = ВыборкаКомментариев.СодержаниеHTML;
				ПозицияПоискаПерехода = 1;
				Пока СтрНайти(ЗаголовокСлужебногоКомментария, "<br>",,ПозицияПоискаПерехода) <> 0 Цикл
					ИндексПерехода = СтрНайти(ЗаголовокСлужебногоКомментария, "<br>",,ПозицияПоискаПерехода);
					ТекстИзмененияРеквизита = Сред(ЗаголовокСлужебногоКомментария, ПозицияПоискаПерехода, ИндексПерехода - 1);
					ЭтоИзменениеСодержания = СтрНайти(ТекстИзмененияРеквизита, "Содержание -->") <> 0;
					ПозицияПоискаПерехода = ИндексПерехода + 4;
					Если Не ЭтоИзменениеСодержания Тогда
						ЗаголовокСлужебногоКомментария = ТекстИзмененияРеквизита;
						Прервать;
					Иначе
						ЗаголовокСлужебногоКомментария = "Содержание";
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				БылоИзменениеСодержания = Ложь;
				Если СтрНайти(ВыборкаКомментариев.СодержаниеHTML, "Содержание -->") <> 0 Тогда
					БылоИзменениеСодержания = Истина;
					Если ПозицияПоискаПерехода = 1 ИЛИ ЗаголовокСлужебногоКомментария = ВыборкаКомментариев.СодержаниеHTML Тогда
						// Изменилось только содержание.
						ЗаголовокСлужебногоКомментария = "Содержание";
						ИзменилосьТолькоСодержание = Истина;
					КонецЕсли;
				КонецЕсли;
				
				// В зависимости от количества изменений используем либо обычный служебный комментарий, либо раскрываемый.
				Если ПозицияПоискаПерехода = 1 И Не БылоИзменениеСодержания Тогда
					ШаблонКомментария = ?(ВыборкаКомментариев.СвойКомментарий, ШаблонСвоегоСлужебногоСообщенияТекст, ШаблонЧужогоСлужебногоСообщенияТекст);
				Иначе
					ШаблонКомментария = ?(ВыборкаКомментариев.СвойКомментарий, ШаблонСвоегоСлужебногоСообщенияРаскрывемый, ШаблонЧужогоСлужебногоСообщенияРаскрывемый);
				КонецЕсли;
				
				ЗаголовокСлужебногоКомментария = 
					"<b>" + ВыборкаКомментариев.Автор + "</b>"
					+ " изменил " 
					+ ЗаголовокСлужебногоКомментария 
					+ " в " 
					+ Формат(ВыборкаКомментариев.ДатаСоздания, "ДФ='HH:mm'");
			Иначе
				ШаблонКомментария = ?(ВыборкаКомментариев.СвойКомментарий, ШаблонСвоегоКомментария, ШаблонЧужогоКомментария);
			КонецЕсли;
			
			ТекущийКомментарий = СтрЗаменить(ШаблонКомментария, "[АвторКомментария]", ВыборкаКомментариев.Автор);
			ТекущийКомментарий = СтрЗаменить(ТекущийКомментарий, "[Дата]", Формат(ВыборкаКомментариев.ДатаСоздания, "ДФ='HH:mm'"));
			
			Если ЗначениеЗаполнено(ЗаголовокСлужебногоКомментария) Тогда
				ТекущийКомментарий = СтрЗаменить(ШаблонКомментария, "[ЗаголовокКомментария]", ЗаголовокСлужебногоКомментария);
			КонецЕсли;
			
			СодержаниеКомментария = ВыборкаКомментариев.СодержаниеHTML;
			ПодставитьИзображенияВHTML(СодержаниеКомментария);
			
			СтрутктураОтбора = Новый Структура;
			СтрутктураОтбора.Вставить("КомментарийВладелец", ВыборкаКомментариев.Ссылка);
			ЭтоПерваяВставкаФайла = Истина;
			Пока ВыборкаФайлов.НайтиСледующий(СтрутктураОтбора) Цикл
				
				Если ЭтоПерваяВставкаФайла Тогда
					СодержаниеКомментария = СодержаниеКомментария + "<br>";
					ЭтоПерваяВставкаФайла = Ложь;
				КонецЕсли;
				
				СодержаниеКомментария = СодержаниеКомментария +
					"<a class=""FileID"" onclick=""return false;"" href ="""+ Строка(ВыборкаФайлов.Ссылка.УникальныйИдентификатор()) + """> " +
				ВыборкаФайлов.Представление + ?(ЗначениеЗаполнено(ВыборкаФайлов.Расширение), "." +  ВыборкаФайлов.Расширение, "") + "</a><br>";
				СсылкиНаФайлыВыведены = Истина;
			КонецЦикла;
			ВыборкаФайлов.Сбросить();
			
			// Убираем последнюю запятую.
			СодержаниеКомментария = ?(Не ЭтоПерваяВставкаФайла,
				Лев(СодержаниеКомментария, СтрДлина(СодержаниеКомментария)-4),
				СодержаниеКомментария);
			
			ТекущийКомментарий = СтрЗаменить(ТекущийКомментарий, "[СодержаниеКомментария]", СодержаниеКомментария);
			ТекстHTMLКомментарии = ТекстHTMLКомментарии + Символы.ПС + ТекущийКомментарий;
			
			ЗаголовокСлужебногоКомментария = "";
			
		КонецЦикла;
	КонецЦикла;
	
	Содержание = Объект.СодержаниеHTML;
	ПодставитьИзображенияВHTML(Содержание);
	
	СтрутктураОтбора = Новый Структура;
	СтрутктураОтбора.Вставить("КомментарийВладелец", Справочники.тз_Комментарии.ПустаяСсылка());
	ЭтоПерваяВставкаФайла = Истина;
	Пока ВыборкаФайлов.НайтиСледующий(СтрутктураОтбора) Цикл
		
		Если ЭтоПерваяВставкаФайла Тогда
			Содержание = Содержание + "<br>";
			ЭтоПерваяВставкаФайла = Ложь;
		КонецЕсли;
		
		Содержание = Содержание +
			"<a class=""FileID"" onclick=""return false;"" href ="""+ Строка(ВыборкаФайлов.Ссылка.УникальныйИдентификатор()) + """> " +
		ВыборкаФайлов.Представление + ?(ЗначениеЗаполнено(ВыборкаФайлов.Расширение), "." + ВыборкаФайлов.Расширение, "")  +"</a><br>";
		СсылкиНаФайлыВыведены = Истина;
	КонецЦикла;
	
	// Убираем последнюю запятую.
	Содержание = ?(Не ЭтоПерваяВставкаФайла,
		Лев(Содержание, СтрДлина(Содержание)-4),
		Содержание);
		
	// Формируем первое служебное сообщение создания задания.
	ФорматДатыСозданияЗадания = ПолучитьФорматПоДате(Объект.Дата, ТекущаяДата);
	ТекстЗаголовкаСлужебногоКомментария = "<b>" + Объект.Автор + "</b>"
		+ " создал задание в "
		+ Формат(Объект.Дата, ФорматДатыСозданияЗадания);
	СлужебныйКомментарийСозданияЗадания = "<div class=""comments"">"
		+ СтрЗаменить(
			?(Объект.Автор = ТекущийПользователь, ШаблонСвоегоСлужебногоСообщенияРаскрывемый, ШаблонЧужогоСлужебногоСообщенияРаскрывемый),
			"[ЗаголовокКомментария]",
			ТекстЗаголовкаСлужебногоКомментария)
		+ "</div>";
	СодержаниеПервогоСлужебногоКомментария= ПолучитьСодержаниеПоПервомуЗаполнениюЗадания(Объект);
	
	СлужебныйКомментарийСозданияЗадания = СтрЗаменить(СлужебныйКомментарийСозданияЗадания, "[СодержаниеКомментария]", СодержаниеПервогоСлужебногоКомментария);
	
	СодержаниеЗадания = СлужебныйКомментарийСозданияЗадания + СтрЗаменить(ШаблонСодержания, "[Заголовок]", СокрЛП(Объект.Номер) + ". " + СокрЛП(Объект.Наименование));
	СодержаниеЗадания = СтрЗаменить(СодержаниеЗадания, "[Содержание]", Содержание);
	ТекстHTML = СтрЗаменить(ТекстHTML, "[СодержаниеЗадания]", СодержаниеЗадания);
	
	// Добавим текст шаблона для добавления последующих комментариев.
	ТекстHTMLКомментарии = ТекстHTMLКомментарии + Символы.ПС + "<!--ВводКомментария-->";
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "<!--ВводКомментария-->", ТекстHTMLКомментарии);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСодержаниеПоПервомуЗаполнениюЗадания(ОбъектЗадания)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	""Номер"" КАК АналитикаПредставление,
		|	тз_Задание.Номер КАК Значение
		|ИЗ
		|	Документ.тз_Задание КАК тз_Задание
		|ГДЕ
		|	тз_Задание.Ссылка = &Задание
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	тз_ЗначенияАналитикСрезПервых.Аналитика.Представление,
		|	тз_ЗначенияАналитикСрезПервых.Значение
		|ИЗ
		|	РегистрСведений.тз_ЗначенияАналитик.СрезПервых(
		|			,
		|			Задание = &Задание
		|				И Аналитика <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.тз_ВидыАналитик.Содержание)) КАК тз_ЗначенияАналитикСрезПервых";
	
	Запрос.УстановитьПараметр("Задание", ОбъектЗадания.Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Результат = "";
	Пока Выборка.Следующий() Цикл
		Результат = Результат + Выборка.АналитикаПредставление + " --> " + СокрЛП(Выборка.Значение) + "<br>";
	КонецЦикла;
	Результат = Лев(Результат, СтрДлина(Результат) - 4);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьШаблонСодержания();
	
	ШаблонСодержания ="<div class=""info-container"">
	|	<div class=""info-title"">[Заголовок]</div>
	|	<div class=""info-content"">
	|		[Содержание]
	|	</div>
	|</div>";
	
	Возврат ШаблонСодержания;
	
КонецФункции

&НаСервере
Функция ПолучитьШаблонКомментария(ЭтоСвойКомментарий)
	
	Если ЭтоСвойКомментарий Тогда
		ВидКомментария = "my-comment";
	Иначе
		ВидКомментария = "other-comment";
	КонецЕсли;
	
	ШаблонКомментария = "<div class=""comment-container " + ВидКомментария + """>
	|	<div class=""comment"">
	|		<div class=""comment-header""><b>[АвторКомментария]</b> <date-comment>[Дата]</date-comment></div>
	|		<div class=""comment-text"">[СодержаниеКомментария]</div>
	|	</div>
	|</div>";
	
	Возврат ШаблонКомментария;
	
КонецФункции

&НаСервере
Функция ПолучитьШаблонСлужебногоСообщения(ЭтоСвойКомментарий, НуженШаблонРасрываемый)
	
	Если ЭтоСвойКомментарий Тогда
		ВидКомментария = "my-service";
	Иначе
		ВидКомментария = "other-service";
	КонецЕсли;
	
	Если НуженШаблонРасрываемый Тогда
		
		ШаблонСлужебногоСообщения= "<div class=""comment-container service-comment " + ВидКомментария + """>
		|	<div class=""service-header"">
		|			[ЗаголовокКомментария]
		|			<span class=""toggle-arrow"">▼</span>
		|	</div>
		|	<div class=""service-content"">
		|		[СодержаниеКомментария]
		|	</div>
		|</div>";
		
	Иначе
		
		ШаблонСлужебногоСообщения = "<div class=""comment-container service-comment " + ВидКомментария + """>
		|	<div class=""service-header-text"">
		|		[ЗаголовокКомментария]
		|	</div>
		|</div>";
		
	КонецЕсли;
	
	Возврат ШаблонСлужебногоСообщения;
	
КонецФункции

&НаСервере
Функция ПолучитьШаблонДаты()
	
	ШаблонДаты = "<div class=""date-separator"">
	|	<span class=""date-text"">[Дата]</span>
	|</div>";
	
	Возврат ШаблонДаты;
	
КонецФункции

&НаСервере
Функция ПолучитьФорматПоДате(Дата, ТекущаяДата, НебходимоВремя = Истина)
	
		Если НачалоДня(Дата) = НачалоДня(ТекущаяДата) И НебходимоВремя Тогда
			ФорматДаты = "ДФ='";
		ИначеЕсли НачалоГода(Дата) = НачалоГода(ТекущаяДата) Тогда
			ФорматДаты = "ДФ='d MMMM ";
		Иначе
			ФорматДаты = "ДФ='d MMMM yyyy ''г.'' ";
		КонецЕсли;
		
		Если НебходимоВремя Тогда
			ФорматДаты = ФорматДаты + "HH:mm'";
		Иначе
			ФорматДаты = ФорматДаты + "'";
		КонецЕсли;
		
		Возврат ФорматДаты;
КонецФункции

&НаСервере
Процедура ПодставитьИзображенияВHTML(ТекстHTML, Вложения = Неопределено, ЗаполнитьВыведенныеИзображения = Ложь)
	
	ТекстИзображения = НайтиТекстБлокаHTML(ТекстHTML, "<!НачалоИзображения!>", "<!КонецИзображения!>");
	Пока ЗначениеЗаполнено(ТекстИзображения) Цикл
		МассивПараметров = СтрРазделить(ТекстИзображения, "_");
		СсылкаСтрокой = МассивПараметров[0];
		Если МассивПараметров.Количество() > 1 Тогда
			ВысотаИзображения = МассивПараметров[1];
			ШиринаИзображения = МассивПараметров[2];
		Иначе
			ВысотаИзображения = "height=""160px""";
			ШиринаИзображения = "width=""240px""";
		КонецЕсли;
		ПрисоединенныйФайл = Справочники.тз_ЗаданиеПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(СсылкаСтрокой));
		Если ПрисоединенныйФайл <> Неопределено Тогда
			ДвоичныеДанные = тз_РаботаСФайлами.ПолучитьФайлИзХранилищаФайлов(ПрисоединенныйФайл);
			Base64Изображение = Base64Строка(ДвоичныеДанные);
			ТэгИзображения = "<a class=""Image"" onclick=""return false;"" href=""" + СсылкаСтрокой + """><img src=""data:image/jpeg;base64," + Base64Изображение +"""" + ВысотаИзображения + " " +ШиринаИзображения + "/></a>";
			
			Если ЗаполнитьВыведенныеИзображения Тогда
				// Делаем ключ вложения уникальным, т.к. наименования файлов могут дублироваться.
				ИдентификаторВложения = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");;
				тз_ОбщегоНазначенияКлиентСерверТрекер.УдалитьНедопустимыеСимволы(ИдентификаторВложения);
				ИдентификаторВложения = "Id" + ИдентификаторВложения;
				
				ИзображенияВыведенныеВСодержании.Добавить(ДвоичныеДанные, Строка(ПрисоединенныйФайл.УникальныйИдентификатор()));
				Вложения.Вставить(ИдентификаторВложения, Новый Картинка(ДвоичныеДанные));
				
				ТэгИзображения = "<img src="""+ ИдентификаторВложения +""" " + ВысотаИзображения + " " +ШиринаИзображения + "/>";
			КонецЕсли;
			
			ТекстHTML = СтрЗаменить(ТекстHTML, "<!НачалоИзображения!>" + ТекстИзображения+"<!КонецИзображения!>", ТэгИзображения);
		Иначе
			ТекстHTML = СтрЗаменить(ТекстHTML, "<!НачалоИзображения!>" + ТекстИзображения+"<!КонецИзображения!>", "");
		КонецЕсли;
		ТекстИзображения = НайтиТекстБлокаHTML(ТекстHTML, "<!НачалоИзображения!>", "<!КонецИзображения!>");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоРежимуФормы()
	
	РежимРедактирования = РежимФормы = ПредопределенноеЗначение("Перечисление.тз_РежимыФормы.Редактирование");
	
	Элементы.ГруппаНаименованиеРедактирование.Видимость    = РежимРедактирования;
	Элементы.ГруппаСодержаниеРедактирование.Видимость      = РежимРедактирования;
	Элементы.ГруппаДополнительно.Видимость                 = РежимРедактирования;
	Элементы.ЗаписатьЗадание.Видимость                     = РежимРедактирования;
	Элементы.ФормаКомандаДобавитьФайлСодержание.Видимость  = РежимРедактирования;
	
	Элементы.ГруппаОсновные.ТолькоПросмотр                 = Не РежимРедактирования;
	Элементы.ГруппаАналитики.ТолькоПросмотр                = Не РежимРедактирования;
	
	Элементы.ФормаКомандаДобавитьФайлКомментарий.Видимость = Не РежимРедактирования;
	Элементы.ТекстHTML.Видимость                           = Не РежимРедактирования;
	Элементы.КомментарийСоддержаниеФорматируемый.Видимость = Не РежимРедактирования;
	Элементы.Переадресовать.Видимость                      = Не РежимРедактирования;
	Элементы.КоманднаяПанельКомментария.Видимость          = Не РежимРедактирования;
	Элементы.ГруппаКоманд.Видимость                        = Не РежимРедактирования;
	Элементы.КомментарийДобавить.Видимость                 = Не РежимРедактирования;
	Элементы.ГруппаПодвалКоманды.Видимость                 = Не РежимРедактирования;
	
	Если РежимРедактирования Тогда
		Элементы.ЗаписатьЗадание.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Элементы.ПоказыватьСлужебныеКомментарииКоманда.Видимость = Не РежимРедактирования;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьАналитикиПредопределеннымиЗначениями()
	
	ДобавитьАналиткуВручную(ПланыВидовХарактеристик.тз_ВидыАналитик.ВидЗадания,          "ВидЗадания", Истина);
	ДобавитьАналиткуВручную(ПланыВидовХарактеристик.тз_ВидыАналитик.Приоритет,           "Приоритет");
	ДобавитьАналиткуВручную(ПланыВидовХарактеристик.тз_ВидыАналитик.Проект,              "Проект");
	ДобавитьАналиткуВручную(ПланыВидовХарактеристик.тз_ВидыАналитик.Этап,                "Этап");
	ДобавитьАналиткуВручную(ПланыВидовХарактеристик.тз_ВидыАналитик.Состояние,           "Состояние");
	ДобавитьАналиткуВручную(ПланыВидовХарактеристик.тз_ВидыАналитик.Содержание,          "Содержание");
	ДобавитьАналиткуВручную(ПланыВидовХарактеристик.тз_ВидыАналитик.НаименованиеЗадания, "Наименование", Истина);
	ДобавитьАналиткуВручную(ПланыВидовХарактеристик.тз_ВидыАналитик.СтатусВыполнения,    "СтатусВыполнения");
	ДобавитьАналиткуВручную(ПланыВидовХарактеристик.тз_ВидыАналитик.ТекущийИсполнитель,  "ТекущийИсполнитель");
	ДобавитьАналиткуВручную(ПланыВидовХарактеристик.тз_ВидыАналитик.Основание,           "Основание");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьАналиткуВручную(Аналитика, ИмяРеквизита, Обязательная = Ложь)
	
	НоваяАналитика = ЗначенияАналитик.Добавить();
	НоваяАналитика.Аналитика = Аналитика;
	НоваяАналитика.ИмяЭлемента = ИмяРеквизита;
	НоваяАналитика.Обязательная = Обязательная;
	НоваяАналитика.Предопределенный = Истина;
	
КонецПроцедуры

&НаСервере
Процедура КомментарийДобавитьНаСервере(КомментарийФорматируемый = Неопределено,КомментарийТекст = Неопределено, ЭтоСлужебный=Ложь, СекундыДляСозданияРазницы = 0)
	
	Если Объект.Ссылка.Пустая() Тогда
		Отказ = Ложь;
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ЗаписьНового", Истина);
		ЗаписатьИзмененияОбъекта(Отказ, ПараметрыЗаписи);
		Если Отказ Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед добавлением комментария, заполните обязательные реквизиты.'");
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Определим параметры нового комментария
	КомментарийАвтор = тз_Пользователи.ТекущийПользователь();
	КомментарийДата  = ТекущаяДатаСеанса() + СекундыДляСозданияРазницы;
	
	// Найдем подходящий для обновления комментарий
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Комментарии.Ссылка КАК Ссылка,
	|	Комментарии.ДатаСоздания КАК ДатаСоздания,
	|	Комментарии.СодержаниеHTML КАК СодержаниеHTML,
	|	Комментарии.Содержание КАК Содержание,
	|	Комментарии.Автор КАК Автор,
	|	Комментарии.ТипКомментария КАК ТипКомментария
	|ИЗ
	|	Справочник.тз_Комментарии КАК Комментарии
	|ГДЕ
	|	Комментарии.Задание = &Задание
	|	И НЕ Комментарии.ПометкаУдаления
	|	И Комментарии.ДатаСоздания >= &ДатаСоздания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Задание",      Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаСоздания", КомментарийДата-ПериодОбновленияКомментария);
	
	НачатьТранзакцию();
	
	// Получим или создадим объект комментария
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() И Выборка.Автор=КомментарийАвтор 
		И ((ЭтоСлужебный И Выборка.ТипКомментария = ПредопределенноеЗначение("Перечисление.тз_ТипыКомментариев.Служебный"))
			Или (Не ЭтоСлужебный И Выборка.ТипКомментария = ПредопределенноеЗначение("Перечисление.тз_ТипыКомментариев.Комментарий"))) Тогда
		КомментарийОбъект = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		КомментарийОбъект = Справочники.тз_Комментарии.СоздатьЭлемент();
		КомментарийОбъект.Задание   = Объект.Ссылка;
		КомментарийОбъект.ТипКомментария = ?(ЭтоСлужебный,
			Перечисления.тз_ТипыКомментариев.Служебный,
			Перечисления.тз_ТипыКомментариев.Комментарий);
		КомментарийОбъект.Автор     = КомментарийАвтор;
	КонецЕсли;
	
	// Заполняем всегда изменяемые поля
	Вложения = Новый Структура;
	Если КомментарийФорматируемый <> Неопределено Тогда
		
		ТекстHTML = ПолучитьHTMLТекстБезСтилейИЗаполнитьВложения(КомментарийФорматируемый, Вложения, КомментарийОбъект);
		КомментарийОбъект.СодержаниеHTML = ?(ЗначениеЗаполнено(КомментарийОбъект.СодержаниеHTML),
			КомментарийОбъект.СодержаниеHTML + "<br><br>" + ТекстHTML,
			ТекстHTML);
		
		КомментарийОбъект.Наименование = КомментарийФорматируемый.ПолучитьТекст();
	ИначеЕсли КомментарийТекст <> Неопределено Тогда
		КомментарийТекстHTML = СтрЗаменить(КомментарийТекст, Символы.ПС, "<br>");
		ИтоговыйТекст =?(ЗначениеЗаполнено(КомментарийОбъект.СодержаниеHTML),
			КомментарийОбъект.СодержаниеHTML  + "<br><br>" + КомментарийТекстHTML,
			КомментарийТекстHTML);
		КомментарийОбъект.СодержаниеHTML = ИтоговыйТекст;
	КонецЕсли;
	КомментарийОбъект.ДатаСоздания = КомментарийДата;
	
	Попытка
		
		// Записываем комментарий
		КомментарийОбъект.Записать();
		КомментарийСсылка = КомментарийОбъект.Ссылка;
		ДобавитьОтложенныеФайлы(,КомментарийОбъект.Ссылка);
		
	Исключение
		ПричинаОшибки = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		тз_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ПричинаОшибки));
		Возврат;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	// TO DO: Сделать добавление комментарием с последнего момента обновления HTML, а не полное формирование HTML.
	СформироватьHTMLПоле();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьHTMLТекстБезСтилейИЗаполнитьВложения(ФорматируемыйДокумент, Вложения, КомментарийОбъект = Неопределено)
	
	HTMLТекст ="";
	ФорматируемыйДокумент.ПолучитьHTML(HTMLТекст,Вложения); 
	
	HTMLТекст = НайтиТекстБлокаHTML(HTMLТекст, "<body>", "</body>");
	
	ТекстБлокаИзображения =НайтиТекстБлокаHTML(HTMLТекст, "<img", "/>", Истина);
	Пока ТекстБлокаИзображения <> "" Цикл
		
		ИмяИзображения = НайтиТекстБлокаHTML(ТекстБлокаИзображения,"src=""","""");
		
		Если Вложения.Свойство(ИмяИзображения) Тогда
			
			ДвоичныеДанныеФайла = Вложения[ИмяИзображения].ПолучитьДвоичныеДанные();
			ПрисоединенныйФайл = ИзображенияВыведенныеВСодержании.НайтиПоЗначению(ДвоичныеДанныеФайла);
			Если ПрисоединенныйФайл = Неопределено Тогда
				
				ПараметрыФайла = тз_РаботаСФайлами.СтруктураФайлаНаСервере();
				ПараметрыФайла.ВладелецФайла = Объект.Ссылка;
				ПараметрыФайла.КомментарийВладелец = ?(КомментарийОбъект <> Неопределено,
					КомментарийОбъект.Ссылка,
					Справочники.тз_Комментарии.ПустаяСсылка());
				ПараметрыФайла.ИмяБезРасширения = ИмяИзображения;
				ПараметрыФайла.РасширениеБезТочки = НРег(Вложения[ИмяИзображения].Формат());
				ПараметрыФайла.СсылкаНового = Строка(Новый УникальныйИдентификатор());
				ПараметрыФайла.АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(Вложения[ИмяИзображения].ПолучитьДвоичныеДанные(), Новый УникальныйИдентификатор());
				
				БуферФайловСкрытый.Добавить(ПараметрыФайла);
				СсылкаФайла = ПараметрыФайла.СсылкаНового;
			Иначе
				СсылкаФайла = ПрисоединенныйФайл;
			КонецЕсли;

			
			ВысотаИзображения = НайтиТекстБлокаHTML(ТекстБлокаИзображения,"height=""","""", Истина);
			ШиринаИзображения = НайтиТекстБлокаHTML(ТекстБлокаИзображения,"width=""","""", Истина);
			HTMLТекст = СтрЗаменить(HTMLТекст, ТекстБлокаИзображения,
				"<!НачалоИзображения!>" + Строка(СсылкаФайла)+ "_" + ВысотаИзображения + "_" + ШиринаИзображения + "<!КонецИзображения!>");
		КонецЕсли;
		
		ТекстБлокаИзображения = НайтиТекстБлокаHTML(HTMLТекст, "<img", "/>", Истина);
	КонецЦикла;
	
	Возврат HTMLТекст;
	
КонецФункции

&НаСервере
Функция НайтиТекстБлокаHTML(Знач HTMLТекст, ТекстНачалоБлока, ТекстКонецБлока, ВключаяТекстТэгов = Ложь)
	
	Если СтрНайти(HTMLТекст, ТекстНачалоБлока) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстПослеНачалаБлока = Сред(HTMLТекст,
		СтрНайти(HTMLТекст, ТекстНачалоБлока) + ?(ВключаяТекстТэгов, 0, СтрДлина(ТекстНачалоБлока)));
	
	Возврат Сред(ТекстПослеНачалаБлока,1,
		СтрНайти(ТекстПослеНачалаБлока, ТекстКонецБлока,, ?(ВключаяТекстТэгов, СтрДлина(ТекстНачалоБлока) + 1, 1)) + ?(ВключаяТекстТэгов, СтрДлина(ТекстКонецБлока), 0) - 1);
	
КонецФункции 

&НаСервере
Процедура ЗаписатьИзмененияОбъекта(Отказ=ЛОЖЬ, ПараметрыЗаписи=Неопределено)
	
	// Получаем объект для записи
	Попытка
		ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	Исключение
		ПричинаОшибки = ИнформацияОбОшибке();
		//!!! Задать вопрос на перечитывание
		ТекущийОбъект = Объект.Ссылка.ПолучитьОбъект();
	КонецПопытки;
	
	ПерваяЗаписьЗадания = Объект.Ссылка.Пустая() 
		И ПараметрыЗаписи <> Неопределено
		И ПараметрыЗаписи.Свойство("ЗаписьНового");
	
	//Если Объект.Ссылка.Пустая()
	//	И (ПараметрыЗаписи = Неопределено
	//	ИЛИ Не ПараметрыЗаписи.Свойство("ЗаписьНового")) Тогда
	//	Возврат;
	//КонецЕсли;
	
	ПериодТекущаяДата = ТекущаяДатаСеанса();
	//Отказ = НЕ Документы.бр_Задание.ЗаписатьЗадание(ТекущийОбъект, ПериодТекущаяДата);
	ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// При записи основных сведений что-то пошло не так
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Обновлем данные объекта после записи
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	ЭтотОбъект.Модифицированность = ЛОЖЬ;
	
	Если РежимФормы = ПредопределенноеЗначение("Перечисление.тз_РежимыФормы.Редактирование") И ПараметрыЗаписи <> Неопределено И ПараметрыЗаписи.Свойство("ЗаписьНового") Тогда
		ДобавитьОтложенныеФайлы(Объект.Ссылка);
		тз_ОбщегоНазначенияВызовСервераТрекер.ЗаписатьОперациюБизнесСтатистики("СозданиеНовогоЗадания");
	КонецЕсли;
	
	// При создании задания не создаем комментарий
	Если ПерваяЗаписьЗадания Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем текст служебного комментария
	КомментарийЧасти = Новый Массив;
	КомментарийТекст = "";
	
	// Получим все изменения за доступный период обновления записей
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МАКСИМУМ(ЗначенияАналитикСрезПервых.Период) КАК ПериодПервыхРеквизитов
	|ПОМЕСТИТЬ втЗначенияАналитикСрезПервых
	|ИЗ
	|	РегистрСведений.тз_ЗначенияАналитик.СрезПервых(&ДатаСозданияЗадания, Задание = &Задание) КАК ЗначенияАналитикСрезПервых
	|ГДЕ
	|	ЗначенияАналитикСрезПервых.Аналитика <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.тз_ВидыАналитик.Комментарий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияАналитикСрезПоследних.Аналитика КАК Аналитика,
	|	ЗначенияАналитикСрезПоследних.Значение КАК Значение,
	|	ЗначенияАналитикСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ втЗначенияАналитикСрезПоследних
	|ИЗ
	|	РегистрСведений.тз_ЗначенияАналитик.СрезПоследних(
	|			&ТекущаяДата,
	|			Задание = &Задание
	|				И НЕ Период В
	|						(ВЫБРАТЬ
	|							втЗначенияАналитикСрезПервых.ПериодПервыхРеквизитов
	|						ИЗ
	|							втЗначенияАналитикСрезПервых)) КАК ЗначенияАналитикСрезПоследних
	|ГДЕ
	|	ЗначенияАналитикСрезПоследних.Период > &ОтДаты
	|	И ЗначенияАналитикСрезПоследних.Аналитика <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.тз_ВидыАналитик.Комментарий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗначенияАналитикСрезПоследних.Аналитика КАК Аналитика,
	|	втЗначенияАналитикСрезПоследних.Значение КАК Значение,
	|	втЗначенияАналитикСрезПоследних.Период КАК Период,
	|	ЕСТЬNULL(тз_ПроектыДоступныеВидыАналитик.НомерСтроки, 99999) КАК Порядок
	|ИЗ
	|	втЗначенияАналитикСрезПоследних КАК втЗначенияАналитикСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.тз_ПрофилиЗаданий.ДоступныеВидыАналитик КАК тз_ПроектыДоступныеВидыАналитик
	|		ПО (тз_ПроектыДоступныеВидыАналитик.Ссылка = &Профиль)
	|			И втЗначенияАналитикСрезПоследних.Аналитика = тз_ПроектыДоступныеВидыАналитик.Аналитика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Период,
	|	Аналитика";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Профиль", Объект.Профиль);
	Запрос.УстановитьПараметр("Задание", ТекущийОбъект.Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ПериодТекущаяДата);
	Запрос.УстановитьПараметр("ОтДаты",  Справочники.тз_Комментарии.ПолучитьДатуПоследнегоКомментарияПоЗаданию(ТекущийОбъект.Ссылка));
	Запрос.УстановитьПараметр("ДатаСозданияЗадания", ТекущийОбъект.Дата);
	
	// Формируем список изменений в реквизитах
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Аналитика", Выборка.Аналитика);
		СтрокаАналитики = ЗначенияАналитик.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокаАналитики[0].Предопределенный Тогда
			ЗначениеАналитики = Объект[СтрокаАналитики[0].ИмяЭлемента];
		Иначе
			ЗначениеАналитики = ЭтотОбъект[СтрокаАналитики[0].ИмяЭлемента];
		КонецЕсли;
		
		АналитикаНеИзменилась = ЗначениеАналитики <> Выборка.Значение;
		// У содержания ограничение в 1024 символа в значении регистра.
		Если СтрокаАналитики[0].Аналитика = ПредопределенноеЗначение("ПланВидовХарактеристик.тз_ВидыАналитик.Содержание") Тогда
			АналитикаНеИзменилась = Сред(ЗначениеАналитики,1 , 1024) <> Выборка.Значение;
		КонецЕсли;
		
		Если СтрокаАналитики.Количество() > 0
			И АналитикаНеИзменилась Тогда
			Продолжить;
		КонецЕсли;
		
		// Действия для измененных аналитик.
		Если СтрокаАналитики[0].Аналитика = ПредопределенноеЗначение("ПланВидовХарактеристик.тз_ВидыАналитик.Состояние") Тогда
			тз_ОбщегоНазначенияВызовСервераТрекер.ЗаписатьОперациюБизнесСтатистики("ИзменениеСостоянияЗадания");
		КонецЕсли;
		
		КомментарийЧасти.Добавить(СокрЛП(Выборка.Аналитика) + " --> " + СокрЛП(ЗначениеАналитики));
	КонецЦикла;
	
	// Возможно, что-то пошло не так...
	Если КомментарийЧасти.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	// Производим обновление комментария
	КомментарийТекст = СтрСоединить(КомментарийЧасти, Символы.ПС);
	КомментарийДобавитьНаСервере(,КомментарийТекст, ИСТИНА);
	
	// Служебные сведения о задании
	ОбновитьАктуальностьДанных();
	
КонецПроцедуры // ЗаписатьИзмененияОбъекта()

&НаСервере
Процедура ЗаполнитьИсполнителяПоОтветсвенномуПроекта()
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Аналитика", ПланыВидовХарактеристик.тз_ВидыАналитик.Исполнитель);
	НайденныеСтроки = ЗначенияАналитик.НайтиСтроки(СтруктураОтбора);
	Если НайденныеСтроки.Количество() > 0 
		И Не ЗначениеЗаполнено(НайденныеСтроки[0].ЗначениеПоУмолчанию)
		И ЗначениеЗаполнено(Объект.Проект) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	тз_ПрофилиЗаданийДоступныеПроекты.Ответсвенный КАК Ответсвенный
			|ИЗ
			|	Справочник.тз_ПрофилиЗаданий.ДоступныеПроекты КАК тз_ПрофилиЗаданийДоступныеПроекты
			|ГДЕ
			|	тз_ПрофилиЗаданийДоступныеПроекты.Ссылка = &Профиль
			|	И тз_ПрофилиЗаданийДоступныеПроекты.Проект = &Проект";
		
		Запрос.УстановитьПараметр("Проект", Объект.Проект);
		Запрос.УстановитьПараметр("Профиль",Объект.Профиль);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЭтотОбъект[НайденныеСтроки[0].ИмяЭлемента] = Выборка.Ответсвенный;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросПередЗакрытием(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Отказ = Ложь;
		Если КомментарийСоддержаниеФорматируемый.Элементы.Количество() > 0 Тогда
			КомментарийДобавитьНаСервере(КомментарийСоддержаниеФорматируемый);
		КонецЕсли;
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ЗаписьНового", Истина);
		ЗаписатьИзмененияОбъекта(Отказ, ПараметрыЗаписи);
		Если Не Отказ Тогда
			ЗакрытьПринудительно = Истина;
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ЗакрытьПринудительно = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСодержание()
	
		Вложения = Новый Структура;
		ТекстHTML = ПолучитьHTMLТекстБезСтилейИЗаполнитьВложения(СодержаниеФорматируеммыйДокумент, Вложения);
		Если ТекстHTML <> Объект.СодержаниеHTML Тогда
			Объект.СодержаниеHTML = ТекстHTML;
			// Убираем символ перехода строки в конце строки
			СодержаниеТекст = СодержаниеФорматируеммыйДокумент.ПолучитьТекст();
			Объект.Содержание = Сред(СодержаниеТекст, 1, СтрДлина(СодержаниеТекст) - 1);
			Модифицированность = Истина;
		КонецЕсли;
		ИзображенияВыведенныеВСодержании.Очистить();
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗаданиеНаСервере(Отказ)
	
	СохранитьСодержание();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ЗаписьНового", Объект.Ссылка.Пустая());
	ЗаписатьИзмененияОбъекта(Отказ, ПараметрыЗаписи);
	Если Не Отказ Тогда
		Элементы.ЗаписатьЗадание.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьАктуальностьДанных()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Комментарии.Ссылка КАК Ссылка,
		|	Комментарии.ДатаСоздания КАК ДатаСоздания,
		|	Комментарии.Автор КАК Автор
		|ИЗ
		|	Справочник.тз_Комментарии КАК Комментарии
		|ГДЕ
		|	Комментарии.Задание = &Задание
		|	И Комментарии.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания УБЫВ";
	
	Запрос.УстановитьПараметр("Задание", Задание);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаКомментария = РезультатЗапроса.Выбрать();
		ВыборкаКомментария.Следующий();
		ЭтотОбъект.Изменил       = ВыборкаКомментария.Автор;
		ЭтотОбъект.ДатаИзменения = ВыборкаКомментария.ДатаСоздания;
	Иначе
		ЭтотОбъект.Изменил       = Объект.Автор;
		ЭтотОбъект.ДатаИзменения = Объект.Дата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеОсновныхРеквизитов(Результат, ДополнительныеПараметры) Экспорт
	ОбработатьИзменениеОсновныхРеквизитовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОсновныхРеквизитовНаСервере()
	ТекущийОбъект = Объект.Ссылка.ПолучитьОбъект();
	ТекущийОбъект.Прочитать();
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");

	// Читаем основные аналитики задания
	ПриЧтенииНаСервере(ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Если Объект.Ссылка.Пустая() Тогда
		ЭтотОбъект.Заголовок = НСтр("ru='Новое задание'");
		Возврат;
	КонецЕсли;
	
	ЗаголовокФормы = СтрШаблон(НСтр("ru='%1. %2'"), Объект.Номер, Объект.Наименование);
	ЭтотОбъект.Заголовок = ?(ЗначениеЗаполнено(Объект.Наименование), ЗаголовокФормы, НСтр("ru='Задание. Новое'"));
	
	СтрутктураОтбора = Новый Структура("Аналитика,Задание", ПланыВидовХарактеристик.тз_ВидыАналитик.Состояние, Объект.Ссылка);
	СрезПоследнихПоСтатусу = РегистрыСведений.тз_ЗначенияАналитик.СрезПоследних(ТекущаяДатаСеанса(), СтрутктураОтбора);
	ТекстПоСтатусу = "";
	Если СрезПоследнихПоСтатусу.Количество() <> 0 И ЗначениеЗаполнено(СрезПоследнихПоСтатусу[0].Значение) Тогда
		ТекстИзмененияСостояния = СтрШаблон(НСтр("ru='%1 изменил Состояние на %2 от %3'"),
			СокрЛП(Строка(СрезПоследнихПоСтатусу[0].Автор)),
			СокрЛП(Строка(СрезПоследнихПоСтатусу[0].Значение)),
			Формат(СрезПоследнихПоСтатусу[0].Период, "ДФ='dd.MM.yyyy ""в"" HH:mm'"));
		Элементы.ДекорацияДанныеИзмененияСосотояния.Заголовок = ТекстИзмененияСостояния;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтложенныеФайлы(СсылкаЗадания = Неопределено, СсылкаКомментария = Неопределено)
	
	Для Каждого ОтложенныйФайл Из БуферФайлов Цикл
		ОтложенныйФайл.Значение.ВладелецФайла = ?(СсылкаЗадания <> Неопределено, СсылкаЗадания, ОтложенныйФайл.Значение.ВладелецФайла);
		ОтложенныйФайл.Значение.КомментарийВладелец = ?(СсылкаКомментария <> Неопределено, СсылкаКомментария, ОтложенныйФайл.Значение.КомментарийВладелец);
		тз_РаботаСФайлами.ДобавитьФайл(ОтложенныйФайл.Значение, ОтложенныйФайл.Значение.АдресВременногоХранилищаФайла);
		
		Если ОтложенныйФайл.Значение.КомментарийВладелец = Неопределено Тогда
			тз_ОбщегоНазначенияВызовСервераТрекер.ЗаписатьОперациюБизнесСтатистики("ПрикреплениеФайлаКЗаданию");
		Иначе
			тз_ОбщегоНазначенияВызовСервераТрекер.ЗаписатьОперациюБизнесСтатистики("ПрикреплениеФайлаККомментарию");
		КонецЕсли;
		
	КонецЦикла;
	БуферФайлов.Очистить();
	
	Для Каждого ОтложенныйФайлСкрытый Из БуферФайловСкрытый Цикл
		ОтложенныйФайлСкрытый.Значение.ВладелецФайла = ?(СсылкаЗадания <> Неопределено, СсылкаЗадания, ОтложенныйФайлСкрытый.Значение.ВладелецФайла);
		ОтложенныйФайлСкрытый.Значение.КомментарийВладелец = ?(СсылкаКомментария <> Неопределено, СсылкаКомментария, ОтложенныйФайлСкрытый.Значение.КомментарийВладелец);
		тз_РаботаСФайлами.ДобавитьФайл(ОтложенныйФайлСкрытый.Значение, ОтложенныйФайлСкрытый.Значение.АдресВременногоХранилищаФайла);
		
		Если ОтложенныйФайл.Значение.КомментарийВладелец = Неопределено Тогда
			тз_ОбщегоНазначенияВызовСервераТрекер.ЗаписатьОперациюБизнесСтатистики("ПрикреплениеФайлаКЗаданию");
		Иначе
			тз_ОбщегоНазначенияВызовСервераТрекер.ЗаписатьОперациюБизнесСтатистики("ПрикреплениеФайлаККомментарию");
		КонецЕсли;
		
	КонецЦикла;
	БуферФайловСкрытый.Очистить();
	
	ОбновитьТаблицуПрисоединенныхФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайл(ДействиеСФайлом)
	
	Отбор = Новый Структура();
	Отбор.Вставить("ВладелецФайла", Объект.Ссылка);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Отбор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборФайла", ЭтотОбъект, ДействиеСФайлом);
	ОткрытьФорму("Справочник.тз_ЗаданиеПрисоединенныеФайлы.ФормаВыбора",ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайла(Результат, ДействиеСФайлом) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДействиеСФайлом = "ЗагрузитьФайл" Тогда
		тз_РаботаСФайламиКлиент.ЗагрузитьФайл(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСостоянияИзТаблицыСостояний(ТаблицаСостояний, ТекущееСостояние)
	
	Если ТаблицаСостояний.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Состояние", Объект.Состояние);
	СтрокиТекущегоСостояния = ТаблицаСостояний.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиТекущегоСостояния.Количество() > 0  Тогда
		ИндексТекущегоСостояния = СтрокиТекущегоСостояния[0].НомерСтроки - 1;
		
		// Если индекс прошлого состояния меньше 0, то текущее состояние начальное.
		Если ИндексТекущегоСостояния - 1 < 0 Тогда
			ПредыдущееСостояние = Неопределено;
			Элементы.УказатьПредыдущееСостояние.Заголовок = ТаблицаСостояний[ИндексТекущегоСостояния].Представление;
			Элементы.УказатьПредыдущееСостояние.Доступность = Ложь;
		Иначе
			ИндексПредыдущегоСостояния = ИндексТекущегоСостояния -1;
			ПредыдущееСостояние = ТаблицаСостояний[ИндексПредыдущегоСостояния].Состояние;
			
			Элементы.УказатьПредыдущееСостояние.Заголовок = ТаблицаСостояний[ИндексПредыдущегоСостояния].Представление;
			Элементы.УказатьПредыдущееСостояние.Доступность = Истина;
		КонецЕсли;
		
		//Если индекс следующего состояния равен количеству строк, то текущее состояние крайнее в списке.
		Если ИндексТекущегоСостояния + 1 = ТаблицаСостояний.Количество() Тогда
			СледующееСостояние = Неопределено;
			Элементы.УказатьСледующееСостояние.Заголовок = ТаблицаСостояний[ИндексТекущегоСостояния].Представление;
			Элементы.УказатьСледующееСостояние.Доступность = Ложь;
		Иначе
			ИндексСледующегоСостояния = ИндексТекущегоСостояния +1;
			СледующееСостояние = ТаблицаСостояний[ИндексСледующегоСостояния].Состояние;
			
			Элементы.УказатьСледующееСостояние.Заголовок = ТаблицаСостояний[ИндексСледующегоСостояния].Представление;
			Элементы.УказатьСледующееСостояние.Доступность = Истина;
		КонецЕсли;
	Иначе
		// Если не нашлось текущее состояние, то нужно переключить на первое состояние в списке профиля.
		ИндексТекущегоСостояния = 0;
		
		ПредыдущееСостояние = Неопределено;
		Элементы.УказатьПредыдущееСостояние.Заголовок = ТаблицаСостояний[ИндексТекущегоСостояния].Представление;
		Элементы.УказатьПредыдущееСостояние.Доступность = Ложь;
		
		ИндексСледующегоСостояния = ИндексТекущегоСостояния +1;
		СледующееСостояние = ТаблицаСостояний[ИндексСледующегоСостояния].Состояние;
		
		Элементы.УказатьСледующееСостояние.Заголовок = ТаблицаСостояний[ИндексСледующегоСостояния].Представление;
		Элементы.УказатьСледующееСостояние.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокСостоянийПоПрофилю(ПрофильЗадания)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тз_ПрофилиЗаданийДоступныеСостоянияЗаданий.НомерСтроки КАК НомерСтроки,
		|	тз_ПрофилиЗаданийДоступныеСостоянияЗаданий.СостояниеЗадания КАК Состояние,
		|	тз_ПрофилиЗаданийДоступныеСостоянияЗаданий.СостояниеЗадания.Представление КАК Представление,
		|	ВЫБОР
		|		КОГДА тз_ПрофилиЗаданийДоступныеСостоянияЗаданий.Исполнитель = &ПустойПользователь
		|			ТОГДА &Исполнитель
		|		ИНАЧЕ тз_ПрофилиЗаданийДоступныеСостоянияЗаданий.Исполнитель
		|	КОНЕЦ КАК Исполнитель
		|ИЗ
		|	Справочник.тз_ПрофилиЗаданий.ДоступныеСостоянияЗаданий КАК тз_ПрофилиЗаданийДоступныеСостоянияЗаданий
		|ГДЕ
		|	тз_ПрофилиЗаданийДоступныеСостоянияЗаданий.Ссылка = &Профиль
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки,
		|	тз_СостоянияЗаданий.Ссылка КАК Состояние,
		|	тз_СостоянияЗаданий.Представление КАК Представление
		|ПОМЕСТИТЬ втВсеСостояния
		|ИЗ
		|	Справочник.тз_СостоянияЗаданий КАК тз_СостоянияЗаданий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВсеСостояния.НомерСтроки КАК НомерСтроки,
		|	втВсеСостояния.Состояние КАК Состояние,
		|	втВсеСостояния.Представление КАК Представление,
		|	&Исполнитель КАК Исполнитель
		|ИЗ
		|	втВсеСостояния КАК втВсеСостояния
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ПустойПользователь", тз_Пользователи.ПустойПользователь());
	Запрос.УстановитьПараметр("Исполнитель", тз_Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("Профиль", ПрофильЗадания);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если Не РезультатыЗапроса[0].Пустой() Тогда
		Возврат РезультатыЗапроса[0].Выгрузить();
	Иначе
		Возврат РезультатыЗапроса[2].Выгрузить();
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПерейтиНаСостояние(НаправдениеПерехода)
	
	ЧислоПереключения = ?(НаправдениеПерехода = "Вперед", 1, -1);
	
	ЗаполнитьСостоянияИзТаблицыСостояний(ТаблицаСостоянийПоПрофилю, Объект.Состояние);
	
	ИндексНовогоСостояния = ИндексТекущегоСостояния + ЧислоПереключения;
	Если ИндексНовогоСостояния >= ТаблицаСостоянийПоПрофилю.Количество() Тогда
		ИндексНовогоСостояния = 0;
	КонецЕсли;
	
	Объект.Состояние = ТаблицаСостоянийПоПрофилю[ИндексНовогоСостояния].Состояние;
	Объект.ТекущийИсполнитель = ТаблицаСостоянийПоПрофилю[ИндексНовогоСостояния].Исполнитель;
	
	СтатусВыполненияСостояния = Объект.Состояние.СтатусВыполнения;
	СтатусИзменился = Ложь;
	Если СтатусВыполненияСостояния <> Объект.СтатусВыполнения Тогда
		Объект.СтатусВыполнения = СтатусВыполненияСостояния;
		СтатусИзменился = Истина;
	КонецЕсли;
	
	Если Объект.СтатусВыполнения = ПредопределенноеЗначение("Перечисление.тз_СтатусыВыполнения.Завершено") ТОгда
		Если СтатусИзменился Тогда
			Объект.ДатаЗавершения = ТекущаяДатаСеанса();
		КонецЕсли;
	ИначеЕсли СтатусИзменился Тогда
		Объект.ДатаЗавершения = Неопределено;
	КонецЕсли;
	
	ЗаписатьИзмененияОбъекта();
	ЗаполнитьСостоянияИзТаблицыСостояний(ТаблицаСостоянийПоПрофилю, Объект.Состояние);
	
	Если КомментарийСоддержаниеФорматируемый.Элементы.Количество() > 0 Тогда
		КомментарийДобавитьНаСервере(КомментарийСоддержаниеФорматируемый,,,1);
		КомментарийСоддержаниеФорматируемый.УстановитьHTML("", Новый Структура);
	КонецЕсли;
	
	тз_ОбщегоНазначенияВызовСервераТрекер.ЗаписатьОперациюБизнесСтатистики("ИзменениеСостоянияЗадания");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросПоУдалениюФайлов(Результат, ДополительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекущиеДанные = Элементы.ТаблицаПрисоединенныхФайлов.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		УдалениеУспешно = тз_РаботаСФайламиВызовСервера.УдалитьФайлНаСервере(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуПрисоединенныхФайлов()
	
	ТаблицаПрисоединенныхФайлов.Очистить();
	
	// Заполним начало списка присоединенных файлов файлами из буфера с конца списка значений
	// чтобы сохранить сортирововку по дате.
	Если БуферФайлов.Количество() > 0 Тогда
		Для ИндексСтроки = БуферФайлов.Количество() - 1 По 0 Цикл
			СтрокаСписка = БуферФайлов.Получить(ИндексСтроки);
			
			НовыйФайл = ТаблицаПрисоединенныхФайлов.Добавить();
			НовыйФайл.ИмяФайла = СтрокаСписка.Представление;
			НовыйФайл.Файл = СтрокаСписка.Значение;
			НовыйФайл.МодифицируемыйФайл = Истина;
			НовыйФайл.ИдентификаторЭлементаВСписке = СтрокаСписка.ПолучитьИдентификатор();
			НовыйФайл.ИндексИзображенияЗагрузки = 1;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тз_ЗаданиеПрисоединенныеФайлы.Ссылка КАК Файл,
		|	тз_ЗаданиеПрисоединенныеФайлы.Представление КАК Представление,
		|	тз_ЗаданиеПрисоединенныеФайлы.Расширение КАК Расширение,
		|	0 Как ИндексИзображенияЗагрузки,
		|	ЛОЖЬ КАК МодифицируемыйФайл,
		|	ВЫБОР
		|		КОГДА &РежимРедактирования
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ИндексИзображенияУдаления
		|ИЗ
		|	Справочник.тз_ЗаданиеПрисоединенныеФайлы КАК тз_ЗаданиеПрисоединенныеФайлы
		|ГДЕ
		|	тз_ЗаданиеПрисоединенныеФайлы.ВладелецФайла = &Задание
		|	И НЕ тз_ЗаданиеПрисоединенныеФайлы.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	тз_ЗаданиеПрисоединенныеФайлы.ДатаСоздания УБЫВ";
	
	Запрос.УстановитьПараметр("Задание", Задание);
	Запрос.УстановитьПараметр("РежимРедактирования", РежимФормы = ПредопределенноеЗначение("Перечисление.тз_РежимыФормы.Редактирование"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаФайлов = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаФайлов.Следующий() Цикл
		НовыйФайл = ТаблицаПрисоединенныхФайлов.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйФайл, ВыборкаФайлов);
		НовыйФайл.ИмяФайла = ВыборкаФайлов.Представление + "." + ВыборкаФайлов.Расширение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПереадресацию(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбработатьПереадресациюНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПереадресациюНаСервере(Результат)
	Объект.ТекущийИсполнитель = Результат;
	ЗаписатьИзмененияОбъекта();
	тз_ОбщегоНазначенияВызовСервераТрекер.ЗаписатьОперациюБизнесСтатистики("ПереадресацияЗадания");
	Если КомментарийСоддержаниеФорматируемый.Элементы.Количество() > 0 Тогда
		КомментарийДобавитьНаСервере(КомментарийСоддержаниеФорматируемый,,,1);
		КомментарийСоддержаниеФорматируемый.УстановитьHTML("", Новый Структура);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначенияВсехАналитик()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тз_ПрофилиЗаданий.Ссылка КАК ПараметрыПроекта
		|ПОМЕСТИТЬ втПараметрыПроектаЗадания
		|ИЗ
		|	Справочник.тз_ПрофилиЗаданий КАК тз_ПрофилиЗаданий
		|ГДЕ
		|	тз_ПрофилиЗаданий.Ссылка = &ПрофильЗаданий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тз_ПроектыДоступныеВидыАналитик.Аналитика КАК Аналитика,
		|	тз_ПроектыДоступныеВидыАналитик.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
		|	тз_ПроектыДоступныеВидыАналитик.Обязательная КАК Обязательная,
		|	тз_ВидыАналитик.ТипЗначения КАК ТипЗначения,
		|	тз_ПроектыДоступныеВидыАналитик.НомерСтроки КАК Порядок
		|ПОМЕСТИТЬ втСписокАналитик
		|ИЗ
		|	втПараметрыПроектаЗадания КАК втПараметрыПроектаЗадания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.тз_ПрофилиЗаданий.ДоступныеВидыАналитик КАК тз_ПроектыДоступныеВидыАналитик
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.тз_ВидыАналитик КАК тз_ВидыАналитик
		|			ПО тз_ПроектыДоступныеВидыАналитик.Аналитика = тз_ВидыАналитик.Ссылка
		|		ПО втПараметрыПроектаЗадания.ПараметрыПроекта = тз_ПроектыДоступныеВидыАналитик.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тз_ЗначенияАналитикСрезПоследних.Аналитика КАК Аналитика,
		|	тз_ЗначенияАналитикСрезПоследних.Значение КАК Значение
		|ПОМЕСТИТЬ втЗначениеАналитик
		|ИЗ
		|	РегистрСведений.тз_ЗначенияАналитик.СрезПоследних(&Период, Задание = &Задание) КАК тз_ЗначенияАналитикСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСписокАналитик.Аналитика КАК Аналитика,
		|	втСписокАналитик.Аналитика.Представление КАК ИмяАналитики,
		|	втСписокАналитик.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
		|	втСписокАналитик.Обязательная КАК Обязательная,
		|	втЗначениеАналитик.Значение КАК Значение,
		|	втСписокАналитик.ТипЗначения КАК ТипЗначения,
		|	втСписокАналитик.Порядок КАК Порядок
		|ИЗ
		|	втСписокАналитик КАК втСписокАналитик
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗначениеАналитик КАК втЗначениеАналитик
		|		ПО втСписокАналитик.Аналитика = втЗначениеАналитик.Аналитика
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
	
	Запрос.УстановитьПараметр("Задание", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПрофильЗаданий", Объект.Профиль);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЗначенийАналитик = РезультатЗапроса.Выбрать();
	Для Каждого СтрокаАналитки Из ЗначенияАналитик Цикл
		Если СтрокаАналитки.Предопределенный Тогда
			Возврат;
		КонецЕсли;
		ВыборкаЗначенийАналитик.НайтиСледующий(Новый Структура("Аналитика",СтрокаАналитки.Аналитика));
		ЭтотОбъект[СтрокаАналитки.ИмяЭлемента] = ВыборкаЗначенийАналитик.Значение;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
