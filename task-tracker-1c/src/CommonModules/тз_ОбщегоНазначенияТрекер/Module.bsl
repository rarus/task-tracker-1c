#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСписокАналитикЗадания(СписокАналитик, Задание = Неопределено, ПрофильЗаданий = Неопределено, ВызовИзЗадания = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(Задание) Тогда
		// Получаем список аналитик из проекта задания и последнии значения этих аналитик.
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	тз_ПрофилиЗаданий.Ссылка КАК ПараметрыПроекта
			|ПОМЕСТИТЬ втПараметрыПроектаЗадания
			|ИЗ
			|	Справочник.тз_ПрофилиЗаданий КАК тз_ПрофилиЗаданий
			|ГДЕ
			|	тз_ПрофилиЗаданий.Ссылка = &ПрофильЗаданий
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	тз_ПроектыДоступныеВидыАналитик.Аналитика КАК Аналитика,
			|	тз_ПроектыДоступныеВидыАналитик.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
			|	тз_ПроектыДоступныеВидыАналитик.Обязательная КАК Обязательная,
			|	тз_ВидыАналитик.ТипЗначения КАК ТипЗначения,
			|	тз_ПроектыДоступныеВидыАналитик.НомерСтроки КАК Порядок
			|ПОМЕСТИТЬ втСписокАналитик
			|ИЗ
			|	втПараметрыПроектаЗадания КАК втПараметрыПроектаЗадания
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.тз_ПрофилиЗаданий.ДоступныеВидыАналитик КАК тз_ПроектыДоступныеВидыАналитик
			|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.тз_ВидыАналитик КАК тз_ВидыАналитик
			|			ПО тз_ПроектыДоступныеВидыАналитик.Аналитика = тз_ВидыАналитик.Ссылка
			|		ПО втПараметрыПроектаЗадания.ПараметрыПроекта = тз_ПроектыДоступныеВидыАналитик.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	тз_ЗначенияАналитикСрезПоследних.Аналитика КАК Аналитика,
			|	тз_ЗначенияАналитикСрезПоследних.Значение КАК Значение
			|ПОМЕСТИТЬ втЗначениеАналитик
			|ИЗ
			|	РегистрСведений.тз_ЗначенияАналитик.СрезПоследних(&Период, Задание = &Задание) КАК тз_ЗначенияАналитикСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втСписокАналитик.Аналитика КАК Аналитика,
			|	втСписокАналитик.Аналитика.Представление КАК ИмяАналитики,
			|	втСписокАналитик.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
			|	втСписокАналитик.Обязательная КАК Обязательная,
			|	втЗначениеАналитик.Значение КАК Значение,
			|	втСписокАналитик.ТипЗначения КАК ТипЗначения,
			|	втСписокАналитик.Порядок КАК Порядок
			|ИЗ
			|	втСписокАналитик КАК втСписокАналитик
			|		ЛЕВОЕ СОЕДИНЕНИЕ втЗначениеАналитик КАК втЗначениеАналитик
			|		ПО втСписокАналитик.Аналитика = втЗначениеАналитик.Аналитика
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок";
		
		Запрос.УстановитьПараметр("Задание", Задание);
		Запрос.УстановитьПараметр("ПрофильЗаданий", ПрофильЗаданий);
		Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
		
	Иначе
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	тз_ПроектыДоступныеВидыАналитик.Аналитика КАК Аналитика,
			|	тз_ПроектыДоступныеВидыАналитик.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
			|	тз_ПроектыДоступныеВидыАналитик.Обязательная КАК Обязательная,
			|	тз_ПроектыДоступныеВидыАналитик.Аналитика.Представление КАК ИмяАналитики,
			|	тз_ВидыАналитик.ТипЗначения КАК ТипЗначения,
			|	тз_ПроектыДоступныеВидыАналитик.НомерСтроки КАК Порядок
			|ИЗ
			|	Справочник.тз_ПрофилиЗаданий.ДоступныеВидыАналитик КАК тз_ПроектыДоступныеВидыАналитик
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.тз_ВидыАналитик КАК тз_ВидыАналитик
			|		ПО тз_ПроектыДоступныеВидыАналитик.Аналитика = тз_ВидыАналитик.Ссылка
			|ГДЕ
			|	тз_ПроектыДоступныеВидыАналитик.Ссылка = &ПрофильЗаданий
			|	И ВЫБОР
			|			КОГДА &ВызовИзЗадания
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ тз_ПроектыДоступныеВидыАналитик.ВСписке = ИСТИНА
			|		КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок";
		
		Запрос.УстановитьПараметр("ПрофильЗаданий", ПрофильЗаданий);
		Запрос.УстановитьПараметр("ВызовИзЗадания", ВызовИзЗадания);
	
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СписокАналитик.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьРеквизитыИЭлементыАналитик(Форма, СписокАналитик, РодительскийЭлемент, ЗаполнитьЗначения = Ложь, ПоложениеЗаголовка = Неопределено, ВызовИзЗадания = Ложь) Экспорт
	
	// Создаем реквизиты для аналитик
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого Аналитика Из СписокАналитик Цикл
		
		Если Аналитика.Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(Аналитика.ЗначениеПоУмолчанию));
		
		// Создаем уникальное имя для аналитики, чтобы избежать конфликта уникальности имен
		ИмяАналиткиПриведенное = Аналитика.ИмяАналитики;
		тз_ОбщегоНазначенияКлиентСерверТрекер.УдалитьНедопустимыеСимволы(ИмяАналиткиПриведенное);
		ИмяАналиткиПриведенное = СтрЗаменить(ИмяАналиткиПриведенное, " ", "");
		
		ИмяЭлемента = ИмяАналиткиПриведенное
			+ "_"
			+ СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
			
		Аналитика.ИмяАналиткиПриведенное = ИмяАналиткиПриведенное;
		Аналитика.ИмяЭлемента = ИмяЭлемента;
		
		НовыйРеквизит = Новый РеквизитФормы(ИмяЭлемента, Аналитика.ТипЗначения);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	
	// Создаем элементы для аналитик и задаем значение либо из регистра, либо из значения по-умолчанию.
	Для Каждого Аналитика Из СписокАналитик Цикл
		
		Если Аналитика.Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлемент = Форма.Элементы.Добавить(Аналитика.ИмяЭлемента, Тип("ПолеФормы"), РодительскийЭлемент);
		
		НовыйЭлемент.Заголовок = Аналитика.ИмяАналитики;
		НовыйЭлемент.ПутьКДанным = Аналитика.ИмяЭлемента;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииПрограммногоРеквизита");
		
		Если ПоложениеЗаголовка <> Неопределено Тогда
			НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовка;
		КонецЕсли;
		
		Если ВызовИзЗадания Тогда
			НовыйЭлемент.ШрифтЗаголовка = Новый Шрифт(,,Истина);
		КонецЕсли;
		
		Если Аналитика.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
			НовыйЭлемент.ВидФлажка = ВидФлажка.Выключатель;
			НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		Иначе
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		КонецЕсли;
		
		Если ЗаполнитьЗначения Тогда
			// Аналитика по заданию еще не заполнялась.
			Если Аналитика.Значение = Неопределено Тогда
				Форма[Аналитика.ИмяЭлемента] = Аналитика.ЗначениеПоУмолчанию;
			// Есть значения из регистра.
			Иначе
				Форма[Аналитика.ИмяЭлемента] = Аналитика.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьСвязьПараметраВыбораЭтапа(ЭлементЭтапа, ИмяРеквизитаПроекта, ЭлементПараметровВыбора = Неопределено) Экспорт
	
	РеквизитЭтапаИзКонстанты = Константы.тз_РеквизитЭтапаДляСвязиСПроектом.Получить();
	Если Не ЗначениеЗаполнено(РеквизитЭтапаИзКонстанты) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементПараметровВыбора <> Неопределено Тогда
		НовыйЭлементСвязи = ЭлементПараметровВыбора.Добавить();
		НовыйЭлементСвязи.Имя = "Отбор." + РеквизитЭтапаИзКонстанты;
		НовыйЭлементСвязи.Поле = Новый ПолеКомпоновкиДанных(ИмяРеквизитаПроекта);
	Иначе
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор." + РеквизитЭтапаИзКонстанты, ИмяРеквизитаПроекта);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);
		ЭлементЭтапа.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТипОпределяемогоТипа(ИмяОпределяемогоТипа, ВозвратСтроки = Ложь, ТекстОшибки = "") Экспорт
	
	ТипыПределеяемогоТипа = Метаданные.ОпределяемыеТипы.Найти(ИмяОпределяемогоТипа).Тип.Типы();
	Если ТипыПределеяемогоТипа.Количество() = 1 Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипыПределеяемогоТипа[0]);
		Возврат ?(ВозвратСтроки, ОбъектМетаданных.Имя, ТипыПределеяемогоТипа[0]);
	ИначеЕсли ТипыПределеяемогоТипа.Количество() = 2 Тогда
		ИндексСтандартногоОбъекта = ТипыПределеяемогоТипа.Найти(Тип("СправочникСсылка." + ИмяОпределяемогоТипа));
		Если ИндексСтандартногоОбъекта <> Неопределено Тогда
			ТипыПределеяемогоТипа.Удалить(ИндексСтандартногоОбъекта);
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипыПределеяемогоТипа[0]);
			Возврат ?(ВозвратСтроки, ОбъектМетаданных.Имя, ТипыПределеяемогоТипа[0]);
		Иначе
			ТекстОшибки = СтрШаблон(НСтр("ru='Для определяемого типа %1 выбрано слишком много используемых типов.'"), ИмяОпределяемогоТипа);
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		ТекстОшибки = ?(ТипыПределеяемогоТипа.Количество() = 0,
			СтрШаблон(НСтр("ru='Для определяемого типа %1 не выбран используемый тип.'"), ИмяОпределяемогоТипа),
			СтрШаблон(НСтр("ru='Для определяемого типа %1 выбрано слишком много используемых типов.'"), ИмяОпределяемогоТипа));
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ОпределяемыеТипыНапоминанийЗаполнены() Экспорт
	
	ТипНапоминанияСсылка = Метаданные.ОпределяемыеТипы.Найти("ПредметНапоминания");
	ТипНапоминанияОбъект = Метаданные.ОпределяемыеТипы.Найти("ПредметНапоминанияОбъект");
	
	Если ТипНапоминанияСсылка = Неопределено Или ТипНапоминанияОбъект = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипыСсылок = ТипНапоминанияСсылка.Тип.Типы();
	ИндексТипаСсылки = ТипыСсылок.Найти(Тип("ДокументСсылка.тз_Задание"));
	
	ТипыОбъектов = ТипНапоминанияОбъект.Тип.Типы();
	ИндексТипаОбъекта = ТипыОбъектов.Найти(Тип("ДокументОбъект.тз_Задание"));
	
	Возврат ИндексТипаСсылки <> Неопределено И ИндексТипаОбъекта <> Неопределено;
	
КонецФункции

Функция ПолучитьМассивТиповСвязейЭтапаСПроектом() Экспорт
	
	МассивТиповЭтапа = Метаданные.ОпределяемыеТипы.тз_Этапы.Тип.Типы();
	Если МассивТиповЭтапа.Количество() > 1 Тогда
		ИндексСтандартногоТипаЭтапа = МассивТиповЭтапа.Найти(Тип("СправочникСсылка.тз_Этапы"));
		Если ИндексСтандартногоТипаЭтапа <> Неопределено Тогда
			МассивТиповЭтапа.Удалить(ИндексСтандартногоТипаЭтапа);
		КонецЕсли;
	КонецЕсли;
	
	Если МассивТиповЭтапа.Количество() <> 1 Тогда
		ВызватьИсключение ?(МассивТиповЭтапа.Количество() = 0, 
			НСтр("ru='Для определяемого типа тз_Этапы не выбран тип.'"),
			НСтр("ru='Для определяемого типа тз_Этапы выбрано слишеом много типов.'"));
	КонецЕсли;
		
	МассивТиповПроекта = Метаданные.ОпределяемыеТипы.тз_Проекты.Тип.Типы();
	Если МассивТиповПроекта.Количество() > 1 Тогда
		ИндексСтандартногоТипаПроекта = МассивТиповПроекта.Найти(Тип("СправочникСсылка.тз_Проекты"));
		Если ИндексСтандартногоТипаПроекта <> Неопределено Тогда
			МассивТиповПроекта.Удалить(ИндексСтандартногоТипаПроекта);
		КонецЕсли;
	КонецЕсли;
	
	Если МассивТиповПроекта.Количество() <> 1 Тогда
		ВызватьИсключение ?(МассивТиповПроекта.Количество() = 0, 
			НСтр("ru='Для определяемого типа тз_Проекты не выбран тип.'"),
			НСтр("ru='Для определяемого типа тз_Проекты выбрано слишеом много типов.'"));
	КонецЕсли;
	
	ОбъектМетаданныхЭтапа = Метаданные.НайтиПоТипу(МассивТиповЭтапа[0]);
	ПроектОписаниеТипов = МассивТиповПроекта[0];
	МассивРеквизитовПоТипуПроекта = Новый Массив;
	Для Каждого Реквизит Из ОбъектМетаданныхЭтапа.Реквизиты Цикл
		ИндексТипаПроект = Реквизит.Тип.Типы().Найти(ПроектОписаниеТипов);
		Если ИндексТипаПроект <> Неопределено Тогда
			МассивРеквизитовПоТипуПроекта.Добавить(Реквизит);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит Из ОбъектМетаданныхЭтапа.СтандартныеРеквизиты Цикл
		ИндексТипаПроект = Реквизит.Тип.Типы().Найти(ПроектОписаниеТипов);
		Если ИндексТипаПроект <> Неопределено Тогда
			МассивРеквизитовПоТипуПроекта.Добавить(Реквизит);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРеквизитовПоТипуПроекта;
	
КонецФункции

Процедура ЗаписатьОперациюБизнесСтатистики(ИмяОперации, Значение = 1, Комментарий = "") Экспорт
	
	// Проверим, есть ли подсистема мониторинга
	Если Метаданные.ОбщиеМодули.Найти("ЦентрМониторинга") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// АПК:488-выкл Модуля может не быть в системе, обходим синтаксис контроль платформы
	УстановитьБезопасныйРежим(Истина);
	МодульЦентрМониторинга = Вычислить("ЦентрМониторинга");
	// АПК:488-вкл
	
	ИмяОперации = "Инструменты.ТрекерЗаданий." + ИмяОперации;
	МодульЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяОперации, Значение, Комментарий);
	
КонецПроцедуры

#КонецОбласти